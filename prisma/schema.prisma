generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Achievement {
  id           Int        @id @default(autoincrement())
  rank         String
  bonus        Int
  point        Int?
  tournamentId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  players      Player[]
  teams        Team[]
}

model Ban {
  id        Int      @id @default(autoincrement())
  gameId    String
  heroId    Int
  order     Int
  radiant   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  game      Game     @relation(fields: [gameId], references: [id])
  hero      Hero     @relation(fields: [heroId], references: [id])
}

model Game {
  id            String     @id
  type          Int
  startTime     DateTime
  duration      Int
  radiantTeamId Int
  direTeamId    Int
  tournamentId  Int
  stageId       Int
  matchId       Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  radiantWin    Boolean    @default(true)
  direScore     Int        @default(0)
  radiantScore  Int        @default(0)
  bans          Ban[]
  dire          Team       @relation("Game_direTeamIdToTeam", fields: [direTeamId], references: [id])
  match         Match      @relation(fields: [matchId], references: [id])
  radiant       Team       @relation("Game_radiantTeamIdToTeam", fields: [radiantTeamId], references: [id])
  stage         Stage      @relation(fields: [stageId], references: [id])
  tournament    Tournament @relation(fields: [tournamentId], references: [id])
  picks         Pick[]
  records       Record[]
}

model Hero {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  cname     String   @unique
  avatar    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bans      Ban[]
  picks     Pick[]
  records   Record[]
}

model Item {
  id        Int      @id
  name      String   @unique
  cname     String
  cost      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Match {
  id             Int        @id @default(autoincrement())
  startTime      DateTime
  status         Int        @default(0)
  bo             Int
  type           Int
  extra          Boolean    @default(false)
  tournamentId   Int
  stageId        Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  group          Int        @default(0)
  homeTeamId     Int?
  awayTeamId     Int?
  awayScore      Int        @default(0)
  homeScore      Int        @default(0)
  games          Game[]
  awayTeam       Team?      @relation("Match_awayTeamIdToTeam", fields: [awayTeamId], references: [id])
  homeTeam       Team?      @relation("Match_homeTeamIdToTeam", fields: [homeTeamId], references: [id])
  stage          Stage      @relation(fields: [stageId], references: [id])
  tournament     Tournament @relation(fields: [tournamentId], references: [id])
  relateMatchId  Int?
  relateMatch    Match?     @relation("relate_match", fields: [relateMatchId], references: [id])
  relatedMatches Match[]    @relation("relate_match")
}

model Pick {
  id        Int      @id @default(autoincrement())
  gameId    String
  heroId    Int
  order     Int
  radiant   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  game      Game     @relation(fields: [gameId], references: [id])
  hero      Hero     @relation(fields: [heroId], references: [id])
}

model Player {
  id           Int           @id @default(autoincrement())
  nickname     String
  position     String
  status       Int
  teamId       Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  team         Team?         @relation(fields: [teamId], references: [id])
  records      Record[]
  achievements Achievement[]
}

model Record {
  id          Int      @id @default(autoincrement())
  playerId    Int
  gameId      String
  heroId      Int
  radiant     Boolean
  win         Boolean
  xpm         Int
  gpm         Int
  kills       Int
  deaths      Int
  assists     Int
  level       Int
  heroDamage  Int
  towerDamage Int
  lastHits    Int
  denies      Int
  netWorth    Int
  healing     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       Json?
  game        Game     @relation(fields: [gameId], references: [id])
  hero        Hero     @relation(fields: [heroId], references: [id])
  player      Player   @relation(fields: [playerId], references: [id])
}

model Region {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  cname     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     Team[]
}

model Stage {
  id           Int        @id @default(autoincrement())
  title        String
  rule         String
  startDate    DateTime
  endDate      DateTime
  groups       Json
  mode         Int
  bo           Int?
  type         Int?
  tournamentId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  rule_en      String     @default("")
  title_en     String     @default("")
  games        Game[]
  matches      Match[]
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
}

model Team {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  tag          String?
  logo         String
  status       Int           @default(0)
  regionId     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  dires        Game[]        @relation("Game_direTeamIdToTeam")
  radiants     Game[]        @relation("Game_radiantTeamIdToTeam")
  awayMatches  Match[]       @relation("Match_awayTeamIdToTeam")
  homeMatches  Match[]       @relation("Match_homeTeamIdToTeam")
  players      Player[]
  region       Region        @relation(fields: [regionId], references: [id])
  achievements Achievement[]
  tournament   Tournament[]
}

model Tournament {
  id             Int           @id @default(autoincrement())
  leagueId       Int?
  title          String
  description    String
  startDate      DateTime
  endDate        DateTime
  bonus          Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  description_en String        @default("")
  title_en       String        @default("")
  logo           String?       @default("")
  achievements   Achievement[]
  games          Game[]
  matches        Match[]
  stages         Stage[]
  teams          Team[]
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
